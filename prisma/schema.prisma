generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String?   @unique
  password String?
  image    String?
  emailVerified DateTime?


  groups         GroupMember[]
  expensesPaid   Expense[]
  splits         ExpenseSplit[]
  settlementsFrom   Settlement[] @relation("FromUser")  
  settlementsTo     Settlement[] @relation("ToUser") 
  createdAt         DateTime     @default(now())
}

model Group {
  id     String    @id @default(cuid())
  name   String
  members  GroupMember[]
  expenses  Expense[]
  settlements  Settlement[] 
  createdAt DateTime    @default(now())
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("member")

  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) 
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Decimal
  paidById    String
  groupId     String
  createdAt   DateTime        @default(now())

  paidBy      User            @relation(fields: [paidById], references: [id], onDelete: Cascade)
  group       Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  splits      ExpenseSplit[]
}

model ExpenseSplit {
  id          String   @id @default(cuid())
  expenseId   String
  userId      String
  amountOwed  Decimal

  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settlement {
  id           String   @id @default(cuid())
  fromUserId   String
  toUserId     String
  groupId      String?
  amount       Decimal
  status       String   @default("PENDING") // PENDING, PAID
  createdAt    DateTime @default(now())

  fromUser     User     @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser       User     @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  group        Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

